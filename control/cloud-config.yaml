coreos:
  update:
    reboot-strategy: etcd-lock
  fleet:
    <<: *FLEET_METADATA
    public-ip: $private_ipv4
  etcd:
    <<: *ETCD_DISCOVERY_URL
    addr: $private_ipv4:4001
    peer-addr: $private_ipv4:7001
  units:
    - name: etcd.service
      command: start
      enable: true
    - name: fleet.service
      command: start
      enable: true
    - name: format-ephemeral.service
      command: start
      content: |
        [Unit]
        Description=Formats the ephemeral drive
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/wipefs -f /dev/xvdb
        ExecStart=/usr/sbin/mkfs.ext4 /dev/xvdb
    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /var/lib/docker
        Requires=format-ephemeral.service
        After=format-ephemeral.service
        Before=docker.service
        [Mount]
        What=/dev/xvdb
        Where=/var/lib/docker
        Type=ext4
    - name: extended-environment.install.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=AWS runtime environment installer
        
        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/bin/bash -c 'echo "EC2_INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)" | sudo tee -a /etc/aws_environment'
    - name: extended-fleet-metadata.install.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Fleet per-instance metadata installer
        Before=fleet.service
        
        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/bin/bash -c 'sed -i s/METADATA=/METADATA=ec2_instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id),/ /run/systemd/system/fleet.service.d/20-cloudinit.conf'
    - name: preload-container-images.install.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Pre-load container baseimages
        Requires=docker.service
        After=docker.service
        
        [Service]
        Type=oneshot
        RemainAfterExit=true
        TimeoutStartSec=10m
        ExecStart=/usr/bin/docker pull nordstrom/baseimage-ubuntu:14.04
        ExecStart=/usr/bin/docker pull nordstrom/util
        ExecStart=/usr/bin/docker pull nordstrom/awscli

write_files:
  - path: /etc/aws_environment
    <<: *STATIC_AWS_ENVIRONMENT
  # Docker requires SSL for all registry interaction by default, but Deis doesn't yet support it
  - path: /run/docker_opts.env
    content: |
      DOCKER_OPTS=--dns=172.17.42.1 --dns-search=cluster.local --insecure-registry 10.0.0.0/8 --insecure-registry 172.16.0.0/12 --insecure-registry 192.168.0.0/16
  - path: /etc/profile.d/alias.sh
    content: |
      alias ll='ls -l'
      alias d='docker '
      alias ds='docker ps'
      alias di='docker images'
      alias drm='docker rm -f $(docker ps -qa)'
      alias sd='sudo systemctl'
      alias cci='sudo coreos-cloudinit --from-file'
      alias j='journalctl'
      function nsa { sudo nsenter -p -u -m -i -n -t $(docker inspect -f '{{ .State.Pid }}' $1) ; }
